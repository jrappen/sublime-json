%YAML 1.2
---
# https://yaml.org/spec/1.2/spec.html
# https://www.sublimetext.com/docs/syntax.html
# https://www.sublimetext.com/docs/syntax.html#testing
# https://www.sublimetext.com/docs/scope_naming.html
name: JSON (with Comments)
scope: source.json.jsonc
version: 2


####[ Inheritance ]#####################################################################################################
####[ https://www.sublimetext.com/docs/syntax.html#inheritance ]########################################################


#   The JSONC syntax extends the JSON syntax with comments
#   while making sure that prototype contexts are properly ex- or included.

extends:
  - 'Packages/JSON/JSON.sublime-syntax'


####[ File Extensions ]#################################################################################################


#   To not confuse beginners too much with comments being marked as invalid
#   and not knowing where to change from "JSON" to "JSON (with Comments)",
#   it was decided to apply the "JSON (with Comments)" syntax by default to
#   `*.json` files instead.

file_extensions:

  - json
    # https://datatracker.ietf.org/doc/html/rfc7159

  - jsonc

  - sublime-build
    # https://www.sublimetext.com/docs/build_systems.html

  - sublime-color-scheme
    # https://www.sublimetext.com/docs/color_schemes.html

  - sublime-commands

  - sublime-completions
    # https://www.sublimetext.com/docs/completions.html

  - sublime-keymap
    # https://www.sublimetext.com/docs/key_bindings.html

  - sublime-macro

  - sublime-menu
    # https://www.sublimetext.com/docs/menus.html

  - sublime-mousemap

  - sublime-project
    # https://www.sublimetext.com/docs/projects.html

  - sublime-settings
    # https://www.sublimetext.com/docs/settings.html

  - sublime-theme
    # https://www.sublimetext.com/docs/themes.html

  - sublime-workspace
    # https://www.sublimetext.com/docs/projects.html

  - .babelrc.json
  - .ember-cli

  - .jslintrc
    # JSLint Configuration
    # https://jslint.com

  - babel.config.json
  - babelrc
  - eslintrc
  - eslintrc.json
  - hintrc
  - jsfmtrc
  - jshintrc
  - swcrc


####[ Contexts ]########################################################################################################


contexts:

####[ Prototype / Add to inherited syntax ]#############################################################################

  prototype:
    - include: comments

####[ Extends / Override inherited syntax ]#############################################################################

  inside-double-quoted-string:
    - meta_prepend: true
    - meta_include_prototype: false

  inside-double-quoted-string-inside-mapping:
    - meta_prepend: true
    - meta_include_prototype: false

####[ Comments / Add to inherited syntax ]##############################################################################

  comments:
    - include: comment-line
    - include: comment-block-doc
    - include: comment-block

  comment-line:
    - match: |-
        (?x:
          (//)                                                                  # capture group 1: two forwards slahes
          .*                                                                    # zero or more of any character
          $\n?                                                                  # eol (end of line) optionally followed by newline
        )
      scope: comment.line.double-slash.jsonc
      captures:
        1: punctuation.definition.comment.jsonc

  comment-block-doc:
    - match: |-
        (?x:
          /\*\*                                                                 # forward-slash, two asterisks
          (?!/)                                                                 # negative look-ahead: forward-slash
        )
      scope: punctuation.definition.comment.begin.jsonc
      push:
        - meta_scope: comment.block.documentation.jsonc
        - meta_include_prototype: false
        - match: |-
            (?x:
              \*/                                                               # asterisk, forward-slash
            )
          scope: punctuation.definition.comment.end.jsonc
          pop: 1
        - match: |-
            (?x:
              ^                                                                 # bol (beginning of line)
              \s*                                                               # zero or more whitespace characters
              (\*)                                                              # capture group 1: asterisk
              (?!/)                                                             # negative look-ahead: forward-slash
            )
          captures:
            1: punctuation.definition.comment.jsonc

  comment-block:
    - match: |-
        (?x:
          /\*                                                                   # forward-slash, asterisk
        )
      scope: punctuation.definition.comment.begin.jsonc
      push:
        - meta_scope: comment.block.jsonc
        - meta_include_prototype: false
        - match: |-
            (?x:
              \*/                                                               # asterisk, forward-slash
            )
          scope: punctuation.definition.comment.end.jsonc
          pop: 1
