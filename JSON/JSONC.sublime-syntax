%YAML 1.2
---
# https://yaml.org/spec/1.2/spec.html
# https://www.sublimetext.com/docs/syntax.html
# https://www.sublimetext.com/docs/syntax.html#testing
# https://www.sublimetext.com/docs/scope_naming.html
name: JSONC (JSON with Comments)
scope: source.json.jsonc
version: 2


####[ Inheritance ]#####################################################################################################
####[ https://www.sublimetext.com/docs/syntax.html#inheritance ]########################################################


#   The JSONC syntax extends the JSON syntax with comments
#   while making sure that prototype contexts are properly ex- or included.

extends:
  - 'Packages/JSON/JSON.sublime-syntax'


####[ File Extensions ]#################################################################################################


#   To not confuse beginners too much with comments being marked as invalid and
#   not knowing where to change from `JSON` to `JSONC (JSON with Comments)`, it
#   was decided by Jon to apply the `JSONC (JSON with Comments)` syntax by
#   default to `*.json` files instead.
#                          See: https://github.com/sublimehq/Packages/issues/285

file_extensions:

  - json
    # https://datatracker.ietf.org/doc/html/rfc7159

  - jsonc

  - sublime-build
    # https://www.sublimetext.com/docs/build_systems.html

  - sublime-color-scheme
    # https://www.sublimetext.com/docs/color_schemes.html

  - sublime-commands

  - sublime-completions
    # https://www.sublimetext.com/docs/completions.html

  - sublime-keymap
    # https://www.sublimetext.com/docs/key_bindings.html

  - sublime-macro

  - sublime-menu
    # https://www.sublimetext.com/docs/menus.html

  - sublime-mousemap

  - sublime-project
    # https://www.sublimetext.com/docs/projects.html

  - sublime-settings
    # https://www.sublimetext.com/docs/settings.html

  - sublime-theme
    # https://www.sublimetext.com/docs/themes.html

  - sublime-workspace
    # https://www.sublimetext.com/docs/projects.html

  - .ember-cli

  - .eslintrc
    # ESLint Configuration
    # https://eslint.org/docs/user-guide/configuring/

  - .hintrc
    # Webhint Configuration
    # https://webhint.io/docs/user-guide/configuring-webhint/summary/

  - .jshintrc
    # JSHint
    # https://www.jshint.com/docs/#options

  - .jslintrc
    # JSLint's implementation of JSHint
    # https://www.jslint.com/lint.html

  - .stylintrc
    # stylint Configuration
    # https://github.com/SimenB/stylint

  - .swcrc
    # swc Configuration
    # https://swc.rs/docs/configuring-swc

  - eslintrc.json
    # ESLint Configuration
    # https://eslint.org/docs/user-guide/configuring/

  - languagebabel

  - tsconfig.json
    # TypeScript Configuration
    # https://www.typescriptlang.org/docs/handbook/tsconfig-json.html


####[ Contexts ]########################################################################################################


contexts:

####[ Prototype / Add to inherited syntax ]#############################################################################

  prototype:
    - include: comments

####[ Extends / Override inherited syntax ]#############################################################################

  ################################################################################
  #                                                                              #
  #   The syntax we are inheriting from and extending already excludes           #
  #   prototype from the relevant rules, although not having a prototype         #
  #   itself.                                                                    #
  #                                                                              #
  ################################################################################

####[ Comments / Add to inherited syntax ]##############################################################################

  comments:
    - include: comment-line
    - include: comment-block-doc
    - include: comment-block

  comment-line:
    - match: '//'
      scope: punctuation.definition.comment.jsonc
      push:
        - meta_scope: comment.line.double-slash.jsonc
        - meta_include_prototype: false
        - match: $\n?
          pop: 1

  comment-block-doc:
    - match: '/\*\*(?!/)'
      scope: punctuation.definition.comment.begin.jsonc
      push:
        - meta_scope: comment.block.documentation.jsonc
        - meta_include_prototype: false
        - match: '\*/'
          scope: punctuation.definition.comment.end.jsonc
          pop: 1
        - match: '^\s*(\*)(?!/)'
          captures:
            1: punctuation.definition.comment.jsonc

  comment-block:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.jsonc
      push:
        - meta_scope: comment.block.jsonc
        - meta_include_prototype: false
        - match: '\*/'
          scope: punctuation.definition.comment.end.jsonc
          pop: 1
