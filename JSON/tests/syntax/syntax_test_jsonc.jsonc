// SYNTAX TEST "Packages/JSON/JSONC.sublime-syntax"

// <- source.jsonc

{
// <- meta.mapping punctuation.section.mapping.begin
  "bool": false,
//^^^^^^ meta.mapping.key
//^^^^^^^^^^^^^^ - meta.mapping meta.mapping
//        ^^^^^ constant.language.boolean

  "null": null,
//^^^^^^ meta.mapping.key
//^^^^^^^^^^^^^ - meta.mapping meta.mapping
//        ^^^^ constant.language.null

  "dict": { "key": "value" }
//        ^^^^^^^^^^^^^^^^^^ meta.mapping.value meta.mapping - meta.mapping meta.mapping meta.mapping
//        ^   punctuation.section.mapping.begin
//                         ^ punctuation.section.mapping.end
//        ^^ meta.mapping.value meta.mapping
//          ^^^^^ meta.mapping.key string.quoted.double
//               ^^ meta.mapping.value meta.mapping
//                 ^^^^^^^ meta.mapping.value meta.mapping.value string.quoted.double
//                        ^^ meta.mapping.value meta.mapping

,

  "sep": {},
//     ^ punctuation.separator.mapping.key-value

  "array": [ /**/ ],
//         ^^^^^^^^ meta.mapping.value meta.sequence
//         ^   punctuation.section.sequence.begin
//           ^^^^ comment.block
//                ^ punctuation.section.sequence.end

  "dict": {"foo"/*comment*/:/*comment*/"bar"/*comment*/},
//              ^^^^^^^^^^^ comment.block
//                          ^^^^^^^^^^^ comment.block
//                                          ^^^^^^^^^^^ comment.block

  "dict": {
    "foo": "bar"
    // comment
// ^ - invalid
//  ^^^^^^^^^^ comment.line.double-slash
    ,
//  ^ punctuation.separator.mapping.pair
    "foo": "bar"
    /* comment */
// ^ - invalid
//  ^^^^^^^^^^^^^ comment.block
  },
//^ punctuation.section.mapping.end
// ^ punctuation.separator.mapping.pair

  "string": "string",
//          ^        punctuation.definition.string.begin
//          ^^^^^^^^ meta.mapping.value string.quoted.double
//                 ^ punctuation.definition.string.end

  "unterminated string
//^^^^^^^^^^^^^^^^^^^^ string.quoted.double
//                    ^ string.quoted.double invalid.illegal.unclosed-string

// <- - string

/**/: "test",
// ^ meta.mapping comment.block
//  ^ punctuation.separator.mapping.key-value - comment
//    ^^^^^^ meta.mapping.value string.quoted.double

  "array2":
    [
      "foobar",
//    ^^^^^^^^ meta.mapping.value meta.sequence string.quoted.double - meta.mapping.key
    ]

  "typing json": {}
  ,,,, "another key": false
}
