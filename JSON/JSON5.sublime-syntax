%YAML 1.2
---
#   YAML Documentation:
#       https://yaml.org/spec/1.2/spec.html
#   Sublime Text Documentation:
#       https://www.sublimetext.com/docs/syntax.html
#       https://www.sublimetext.com/docs/syntax.html#testing
#       https://www.sublimetext.com/docs/scope_naming.html
#   This file is being maintained at:
#       https://github.com/sublimehq/Packages/blob/master/JSON/JSON5.sublime-syntax

name: JSON5
scope: source.json.json5
version: 2

extends:                                                                        # https://www.sublimetext.com/docs/syntax.html#inheritance
  - Packages/JSON/syntax-features/json-comment.sublime-syntax
  - Packages/JSON/syntax-features/json-constant-language-ieee754.sublime-syntax
  - Packages/JSON/syntax-features/json-integer-hexadecimal.sublime-syntax
  - Packages/JSON/syntax-features/json-separator-sequence.sublime-syntax
  - Packages/JSON/syntax-features/json-string-quoted-single.sublime-syntax

file_extensions:
  - json5                                                                       # https://json5.org/
                                                                                # https://spec.json5.org/#summary-of-features
                                                                                # https://262.ecma-international.org/5.1/

hidden_file_extensions:
  - .babelrc                                                                    # https://babeljs.io/docs/en/config-files
    # Babel.js File-relative Configuration

  - .babelrc.json                                                               # https://babeljs.io/docs/en/config-files
    # Babel.js File-relative Configuration

  - .jupyterlab-settings                                                        # https://jupyterlab.readthedocs.io/en/stable/user/directories.html?highlight=json5#jupyterlab-user-settings-directory
    # JupyterLab User Settings

  - .parcelrc                                                                   # https://parceljs.org/features/plugins/#.parcelrc
    # parcel Bundler Configuration                                              # https://github.com/parcel-bundler/parcel

  - .postcssrc.json                                                             # https://postcss.org
    # PostCSS Configuration

  - babel.config.json                                                           # https://babeljs.io/docs/en/config-files
    # Babel.js Project-wide Configuration

  - next.config.json                                                            # https://nextjs.org/docs/api-reference/next.config.js/introduction
    # Vercel Next.js Configuration

  - nextrc.json                                                                 # https://nextjs.org/docs/api-reference/next.config.js/introduction
    # Vercel Next.js Configuration

  - techdocs_metadata.json                                                      # https://backstage.io/docs/features/techdocs/techdocs-overview
    # Spotify's @backstage/techdocs_common Configuration                        # https://github.com/backstage/backstage/tree/master/packages/techdocs-common

first_line_match: |-
  (?xi:
    ^ \s* // .*? -\*- .*? \bjson5\b .*? -\*-                                    # editorconfig
  )

########################################################################################################################

#   Boost documentation:
#       https://www.boost.org/doc/libs/1_64_0/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html
#       https://www.boost.org/doc/libs/1_64_0/libs/regex/doc/html/boost_regex/format/boost_format_syntax.html
#   Unicode documentation:
#       https://www.unicode.org/versions/latest/
#       https://www.unicode.org/Public/UCD/latest/ucd/
#   Oniguruma documentation:
#       https://github.com/kkos/oniguruma/blob/master/doc/RE
#       https://github.com/kkos/oniguruma/blob/master/doc/UNICODE_PROPERTIES

variables:
  identifier_escape: |-
    (?x:
      \\u
      (?:
        \h{4}
      | \{\h+\}
      )
    )

  identifier_start: |-
    (?x:
      [_$\p{L}\p{Nl}]
    | {{identifier_escape}}
    )

  identifier_part: |-
    (?x:
      [_$\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]
    | {{identifier_escape}}
    )

  identifier_break: |-
    (?x:
      (?!{{identifier_part}})
    )

  identifier_name: |-
    (?x:
      {{identifier_start}}
      {{identifier_part}}*
      {{identifier_break}}
    )

########################################################################################################################

contexts:

  # TODO: check valid whitespace chars                                          # https://spec.json5.org/#white-space

####[ Values ][ Numbers ]###############################################################################################

  decimal-float-basic:
    - match: |-
        (?x:
          (?:
            ([-+])
            (\s+)?
          )?
          (
            (?:
              (0+)? [1-9] \d*
            | 0
            )
            (?:
              (\.) \d* {{exponent}}?                                            # 1. 1.e1 1.e-1 1.e+1 1.1 1.1e1 1.1e-1 1.1e+1
            | {{exponent}}                                                      # 1e1 1e-1 1e+1
            )
          | (\.) \d+ {{exponent}}?                                              # .1 .1e1 .1e-1 .1e+1
          )
        )
      scope: meta.number.float.decimal.json
      captures:
        1: constant.numeric.sign.json
        2: invalid.illegal.whitespace.json
        3: constant.numeric.value.json
        4: invalid.illegal.leading-zero.json
        5: punctuation.separator.decimal.json
        6: punctuation.separator.decimal.json
      pop: 1

  decimal-integer-basic:
    - match: |-
        (?x:
          (?:
            ([-+])
            (\s+)?
          )?
          (
            (0+)? [1-9] \d*
          | 0
          )
        )
      scope: meta.number.integer.decimal.json
      captures:
        1: constant.numeric.sign.json
        2: invalid.illegal.whitespace.json
        3: constant.numeric.value.json
        4: invalid.illegal.leading-zero.json
      pop: 1

####[ Values ][ Strings ]###############################################################################################

  valid-string-escape-characters:
    - meta_prepend: true

    - match: ((\\)\x{2028})(.*)$\n?
      captures:
        1: constant.character.escape.line-separator.json
        2: punctuation.separator.continuation.line.json
        3: invalid.illegal.expected-eol-after-line-continuation.json

    - match: ((\\)\x{2029})(.*)$\n?
      captures:
        1: constant.character.escape.paragraph-separator.json
        2: punctuation.separator.continuation.line.json
        3: invalid.illegal.expected-eol-after-line-continuation.json

    - match: (\\)$\n?
      captures:
        1: punctuation.separator.continuation.line.json

    - match: \\v
      scope: constant.character.escape.vertical-tab.json

    - match: (\\0)([0-9])?
      captures:
        1: constant.character.escape.null.json
        2: invalid.illegal.unexpected-digit-character.json

    - match: \\x[0-9a-fA-F]{2}
      scope: >-
        constant.character.escape.unicode-symbol.basic-latin-or-latin-1-supplement.json

    - match: \\u[0-9a-fA-F]{4}\\u[0-9a-fA-F]{4}
      scope: constant.character.escape.unicode-symbol.utf16-surrogate-pair.json

  invalid-string-escape-characters:
    - meta_prepend: true

    - match: |-
        (?x:
          ([^\\])
          (?:
            \x{2028}
          | \x{2029}
          )
        )
      captures:
        1: invalid.illegal.expected-backslash-char.json

####[ Structures ][ Objects ]###########################################################################################

  valid-mapping-keys:
    - meta_append: true

    # looking ahead at `identifier_start` would've been faster with possibly
    # invalid matches, but we want to make sure we only match valid ecma
    # `identifier_name`s as keys
    - match: (?={{identifier_name}})
      push: mapping-key-ecma

  mapping-key-ecma:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: >-
        meta.mapping.key.json
        meta.string.json
        string.unquoted.plain.json

    - match: '{{identifier_break}}'
      pop: 1
