%YAML 1.2
---
#   YAML Documentation:
#       https://yaml.org/spec/1.2/spec.html
#   Sublime Text Documentation:
#       https://www.sublimetext.com/docs/syntax.html#ver-dev
#       https://www.sublimetext.com/docs/syntax.html#testing:ver-dev
#       https://www.sublimetext.com/docs/scope_naming.html
#   This file is being maintained at:
#       https://github.com/sublimehq/Packages/blob/master/JSON/JSON%20(Basic).sublime-syntax
#
name: JSON (Basic)
scope: source.json.basic
version: 2
hidden: true


variables:
  exponent: (?:[eE][-+]?\d+)
  pos_integer_decimal: (?:0|[1-9]\d*)


contexts:

  prototype:
    - include: comments

  main:
    - match: '(?=\S)'
      push: top-level-expect-object

####[ Top level ]#######################################################################################################

  # Try these below one-by-one.

  top-level-expect-object:
    - include: top-level-objects
    - match: ''
      push: top-level-expect-array

  top-level-expect-array:
    - include: arrays
    - match: ''
      push: top-level-expect-constant

  top-level-expect-constant:
    - include: constants
    - match: ''
      push: top-level-expect-number

  top-level-expect-number:
    - include: numbers
    - match: ''
      push: top-level-expect-string

  top-level-expect-string:
    - include: strings
    - match: ''
      push: top-level-expect-invalid-remainder

  top-level-expect-invalid-remainder:
    - match: ','
      scope: invalid.illegal.unexpected-separator.json
    - match: ':'
      scope: invalid.illegal.unexpected-separator.json
    - match: '\S*'
      scope: invalid.illegal.unexpected-code-after-first-structure-or-value.json

####[ Structural helpers ]##############################################################################################

  any:
    - include: structures
    - include: values

  structures:
    - include: objects
    - include: arrays

  values:
    - include: constants
    - include: numbers
    - include: strings

####[ Comments ]########################################################################################################

  comments:
    - include: comment-line
    - include: comment-doc-block
    - include: comment-block

  comment-line:
    - match: //.*$\n?
      scope: invalid.illegal.comment.json

  comment-doc-block:
    - match: /\*\*(?!/)
      push: comment-doc-block-content

  comment-doc-block-content:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.comment.json
    - include: comment-block-end

  comment-block:
    - match: /\*
      push: comment-block-content

  comment-block-content:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.comment.json
    - include: comment-block-end

  comment-block-end:
    - match: \*/
      pop: 1

####[ Constants ]#######################################################################################################

  constants:
    - match: \b(?:null)\b
      scope: constant.language.null.json
    - match: \b(?:false|true)\b
      scope: constant.language.boolean.json
    # when erroneously containing upper case letters
    - match: \b(?i:null)\b
      scope: invalid.illegal.expected-lower-case-null.json
    - match: \b(?i:false|true)\b
      scope: invalid.illegal.expected-lower-case-boolean.json

####[ Numbers ]#########################################################################################################

  numbers:
    - include: floats
    - include: integers

  floats:
    - include: decimal-floats

  decimal-floats:
    - match: |-
        (?x:
          (?:(-)|(\+))?
          (
            {{pos_integer_decimal}}
            (?:
              # 1.1 1.1e1 1.1e-1 1.1e+1
              (\.)\d+ {{exponent}}?
              # 1e1 1+e1 1-e1
            | {{exponent}}
            )
          )
        )
      scope: meta.number.float.decimal.json
      captures:
        1: constant.numeric.sign.json
        2: invalid.illegal.numeric-sign.json
        3: constant.numeric.value.json
        4: punctuation.separator.decimal.json

  integers:
    - include: decimal-integers

  decimal-integers:
    - match: (?:(-)|(\+))?({{pos_integer_decimal}})
      scope: meta.number.integer.decimal.json
      captures:
        1: constant.numeric.sign.json
        2: invalid.illegal.numeric-sign.json
        3: constant.numeric.value.json

####[ Strings ]#########################################################################################################

  strings:
    - include: double-quoted-strings

  double-quoted-strings:
    - match: \"
      scope: punctuation.definition.string.begin.json
      push: inside-double-quoted-string

  inside-double-quoted-string:
    - meta_include_prototype: false
    - meta_scope: meta.string.json string.quoted.double.json
    - match: \"
      scope: punctuation.definition.string.end.json
      pop: 1
    - include: double-quoted-string-escape-characters
    - match: \n
      scope: invalid.illegal.unclosed-string.json
      pop: 1

  double-quoted-string-escape-characters:
    - meta_include_prototype: false
    - match: \\\"
      scope: constant.character.escape.double-quote.json
    - include: string-escape-characters

  string-escape-characters:
    - meta_include_prototype: false
    - include: valid-string-escape-characters
    - include: invalid-string-escape-characters

  valid-string-escape-characters:
    - meta_include_prototype: false
    - match: \\\\
      scope: constant.character.escape.back-slash.json
    - match: \\\/
      scope: constant.character.escape.forward-slash.json
    - match: \\b
      scope: constant.character.escape.backspace.json
    - match: \\f
      scope: constant.character.escape.form-feed.json
    - match: \\n
      scope: constant.character.escape.newline.json                             # linefeed
    - match: \\r
      scope: constant.character.escape.carriage-return.json
    - match: \\t
      scope: constant.character.escape.horizontal-tab.json
    - match: \\u[0-9a-fA-F]{4}
      scope: constant.character.escape.unicode-symbol.basic-multilingual-plane.json

  invalid-string-escape-characters:
    - meta_include_prototype: false
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.json

####[ Sequence ]########################################################################################################

  arrays:
    - include: empty-arrays
    - match: \[
      scope: punctuation.definition.sequence.begin.json
      push:
        - array-body
        - array-illegal-separator

  array-body:
    - meta_scope: meta.sequence.list.json
    - match: \]
      scope: punctuation.definition.sequence.end.json
      pop: 1
    - include: array-separators
    - include: any
    - match: '[^\s\]]'
      scope: invalid.illegal.expected-separator.json

  array-separators:
    - match: (?=,)
      branch_point: array-separators
      branch:
        - array-separator
        - array-illegal-separator

  array-separator:
    - match: ','
      scope: punctuation.separator.sequence.json
      set: array-expect-value

  array-expect-value:
    - match: (?=\])
      fail: array-separators
    - include: array-illegal-separator

  array-illegal-separator:
    - match: ','
      scope: invalid.illegal.unexpected-separator.json
    - match: (?=\S)
      pop: 1

  empty-arrays:
    - match: (\[)\s*(\])
      scope: meta.sequence.list.empty.json
      captures:
        1: punctuation.definition.sequence.begin.json
        2: punctuation.definition.sequence.end.json

####[ Mapping ]#########################################################################################################

  # FIXME: leading separators
  # FIXME: trailing commas

  # The top-level contexts here are to ensure that we can apply `meta.toc-list`
  # to the top-level object keys to index them as symbols.

  top-level-objects:
    - include: empty-object
    - match: \{
      scope: punctuation.definition.mapping.begin.json
      push: top-level-meta-mapping

  objects:
    - include: empty-object
    - match: \{
      scope: punctuation.definition.mapping.begin.json
      push: meta-mapping

  empty-object:
    - match: (\{)\s*(\})
      scope: meta.mapping.empty.json
      captures:
        1: punctuation.definition.mapping.begin.json
        2: punctuation.definition.mapping.end.json

  top-level-meta-mapping:
    - meta_scope: meta.mapping.json
    - match: \}
      scope: punctuation.definition.mapping.end.json
      pop: 1
    - include: top-level-mapping-key
    - include: mapping-separator
    - match: '[^\s\}]'
      scope: invalid.illegal.expected-mapping-key.json

  meta-mapping:
    - meta_scope: meta.mapping.json
    - match: \}
      scope: punctuation.definition.mapping.end.json
      pop: 1
    - include: mapping-key
    - include: mapping-separator
    - match: '[^\s\}]'
      scope: invalid.illegal.expected-mapping-key.json

  top-level-mapping-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      push: top-level-mapping-key-double-quoted

  mapping-key:
    - match: \"
      scope: punctuation.definition.string.begin.json
      push: mapping-key-double-quoted

  top-level-mapping-key-double-quoted:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.mapping.key.json meta.toc-list.json meta.string.json string.quoted.double.json
    - include: inside-double-quoted-string

  mapping-key-double-quoted:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.mapping.key.json meta.string.json string.quoted.double.json
    - include: inside-double-quoted-string

  mapping-separator:
    - match: ':'
      scope: punctuation.separator.mapping.key-value.json
      push: mapping-expect-value

  mapping-expect-value:
    - match: ',|\s?(?=\})'
      scope: invalid.illegal.expected-mapping-value.json
      pop: 1
    - match: (?=\S)
      set: mapping-value

  mapping-value:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.json
    - include: any
    - match: ''
      set:
        - match: ','
          scope: punctuation.separator.mapping.pair.json
          pop: 1
        - match: \s*(?=\})
          pop: 1
        - match: \s(?!/[/*])(?=[^\s,])|[^\s,]
          scope: invalid.illegal.expected-mapping-separator.json
          pop: 1
