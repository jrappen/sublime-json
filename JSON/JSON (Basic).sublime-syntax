%YAML 1.2
---
# https://yaml.org/spec/1.2/spec.html
# https://www.sublimetext.com/docs/syntax.html
# https://www.sublimetext.com/docs/syntax.html#testing
# https://www.sublimetext.com/docs/scope_naming.html
name: JSON (Basic)
scope: source.json.basic
version: 2
hidden: true


####[ Contexts ]########################################################################################################


contexts:

  main:
    - include: any

  any:
    - include: constants
    - include: numbers
    - include: strings
    - include: sequence
    - include: mapping

####[ Constants ]#######################################################################################################

  constants:
    - match: \b(?:null)\b
      scope: constant.language.null.json
    - match: \b(?:false|true)\b
      scope: constant.language.boolean.json

####[ Numbers ]#########################################################################################################

  numbers:
    - include: decimal-float
    - include: decimal-integer

  decimal-float:
    - match: |-
        (?x:                                                                    # ignore whitespace
          ([-]?)                                                                # capture group 1: optional sign
          (                                                                     # capture group 2: numeric value
            (?:0|[1-9]\d*)                                                      # zero or any other (positive) decimal integer
            (?:
              (?:(\.)\d+)(?:[eE][-+]?\d+)?|                                     # ... and either a period, one or more number characters, an optional exponent
              (?:[eE][-+]?\d+)                                                  # ... or an exponent
            )
          )
        )
      scope: meta.number.float.decimal.json
      captures:
        1: keyword.operator.arithmetic.json
        2: constant.numeric.value.json
        3: punctuation.separator.decimal.json

  decimal-integer:
    - match: |-
        (?x:                                                                    # ignore whitespace
          ([-]?)                                                                # capture group 1: optional sign
          (0|[1-9]\d*)                                                          # capture group 2: zero or any other (positive) decimal integer
        )
      scope: meta.number.integer.decimal.json
      captures:
        1: keyword.operator.arithmetic.json
        2: constant.numeric.value.json

####[ Strings ]#########################################################################################################

  strings:
    - include: double-quoted-string

  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.json
      push: inside-double-quoted-string

  inside-double-quoted-string:
    - meta_scope: meta.string.json string.quoted.double.json

    # This syntax does not have a prototype, but we make sure
    # inheriting syntaxes cannot inject unwanted rules.
    - meta_include_prototype: false

    - match: '"'
      scope: punctuation.definition.string.end.json
      pop: 1
    - include: double-quoted-string-escape-characters
    - match: \n
      scope: invalid.illegal.unclosed-string.json
      pop: 1

  double-quoted-string-escape-characters:
    - match: \\\"
      scope: constant.character.escape.double-quote.json
    - include: string-escape-characters

  string-escape-characters:
    - match: \\\\
      scope: constant.character.escape.back-slash.json
    - match: \\\/
      scope: constant.character.escape.forward-slash.json
    - match: \\b
      scope: constant.character.escape.backspace.json
    - match: \\f
      scope: constant.character.escape.form-feed.json
    - match: \\n
      scope: constant.character.escape.newline.json                             # linefeed
    - match: \\r
      scope: constant.character.escape.carriage-return.json
    - match: \\t
      scope: constant.character.escape.horizontal-tab.json
    - match: \\u[0-9a-fA-F]{4}
      scope: constant.character.escape.unicode-symbol.json
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.json

####[ Sequence ]########################################################################################################

  sequence:
    - match: \[
      scope: punctuation.section.sequence.begin.json
      push: inside-sequence

  inside-sequence:
    - meta_scope: meta.sequence.json
    - match: \]
      scope: punctuation.section.sequence.end.json
      pop: 1
    - include: any
    - match: ','
      scope: punctuation.separator.sequence.json
    - match: '[^\s\]]'
      scope: invalid.illegal.expected-sequence-separator.json

####[ Mapping ]#########################################################################################################

  mapping:
    - match: \{
      scope: punctuation.section.mapping.begin.json
      push: inside-mapping

  inside-mapping:
    - meta_scope: meta.mapping.json
    - match: \}
      scope: punctuation.section.mapping.end.json
      pop: 1
    - match: '"'
      scope: punctuation.definition.string.begin.json
      push: inside-double-quoted-string-inside-mapping
    - include: latter-part-of-key-value-pair-inside-mapping
    - match: '[^\s\}]'
      scope: invalid.illegal.expected-mapping-key.json

  inside-double-quoted-string-inside-mapping:
    - clear_scopes: 1
    - meta_scope: meta.mapping.key.json meta.string.json string.quoted.double.json

    # This syntax does not have a prototype, but we make sure
    # inheriting syntaxes cannot inject unwanted rules.
    - meta_include_prototype: false

    - include: inside-double-quoted-string

  latter-part-of-key-value-pair-inside-mapping:
    - match: ':'
      scope: punctuation.separator.mapping.key-value.json
      push:
        - match: ',|\s?(?=\})'
          scope: invalid.illegal.expected-mapping-value.json
          pop: 1
        - match: (?=\S)
          set:
            - clear_scopes: 1
            - meta_scope: meta.mapping.value.json
            - include: any
            - match: ''
              set:
                - match: ','
                  scope: punctuation.separator.mapping.pair.json
                  pop: 1
                - match: \s*(?=\})
                  pop: 1
                - match: \s(?!/[/*])(?=[^\s,])|[^\s,]
                  scope: invalid.illegal.expected-mapping-separator.json
                  pop: 1
