%YAML 1.2
---
#
#   This file is being maintained at:
#       https://github.com/sublimehq/Packages/blob/master/JSON/JSON.sublime-syntax


name: JSON
scope: source.json
version: 2

file_extensions:
  - json                                # https://www.json.org/json-en.html
                                        # https://tools.ietf.org/html/std90
                                        # https://datatracker.ietf.org/doc/html/rfc8259
                                        # https://www.ecma-international.org/publications-and-standards/standards/ecma-404/
                                        # https://www.iso.org/standard/71616.html

hidden_file_extensions:
  - .bowerrc                            # Bower
                                        # https://bower.io/docs/config/

  - .htmlhintrc                         # HTML hint
                                        # https://htmlhint.com/docs/user-guide/getting-started

  - .jscsrc                             # JavaScript Code Style Configuration
                                        # https://jscs-dev.github.io

  - .markdownlintrc                     # https://github.com/DavidAnson/markdownlint

  - .tern-config                        # Tern.js Server Configuration
                                        # https://ternjs.net/doc/manual.html#server

  - .tern-project                       # Tern.js Project Configuration
                                        # https://ternjs.net/doc/manual.html#configuration

  - .watchmanconfig                     # Facebook Watchman
                                        # root specific configuration file
                                        # https://facebook.github.io/watchman/docs/config.html

  - Pipfile.lock                        # Pipfile
                                        # https://github.com/pypa/pipfile

  - avsc                                # Pure JavaScript implementation of the Avro specification
                                        # https://github.com/mtth/avsc

  - composer.lock                       # Composer lock file
                                        # https://getcomposer.org/doc/01-basic-usage.md

  - css.map                             # CSS Source Map

  - gltf                                # glTF Runtime 3D asset delivery
                                        # https://www.khronos.com/gltf

  - har                                 # HTTP Archive Format

  - ipynb                               # Jupyter Notebook, formerly known as iPython Notebook
                                        # https://jupyter.org/documentation

  - js.map                              # JavaScript Source Map

  - jsonld                              # JSON for Linking Data
                                        # https://json-ld.org

  - ldjson                              # JSON for Linking Data
                                        # https://json-ld.org

  - schema                              # JSON Schema
                                        # https://json-schema.org/learn

  - tfstate                             # Hashicorp Terraform State
                                        # https://www.terraform.io/docs/language/state/index.html

  - tfstate.backup                      # Hashicorp Terraform State
                                        # https://www.terraform.io/docs/language/state/index.html

  - ts.map                              # TypeScript Source Map

  - webapp                              # Web app manifests
                                        # https://developer.mozilla.org/en-US/docs/Web/Manifest

  - webmanifest                         # Web app manifests
                                        # https://developer.mozilla.org/en-US/docs/Web/Manifest

first_line_match: |-
  (?xi:
    ^ \s* // .*? -\*- .*? \bjson\b .*? -\*-
  )

##[ VARIABLES ]#################################################################

variables:
  numeric_exponent: |-
    (?x:
      [eE]
      [-+]??
      \d+
    )

##[ CONTEXTS ]##################################################################

contexts:

  prototype:
    - include: comments

  main:
    - match: (?=\S)
      push:
        - invalid-remainder
        - any-else-pop

##[ COMMENTS ]##################################################################

  comments:
    - include: valid-comments
    - include: invalid-comments

  valid-comments: []

  invalid-comments:
    - include: line-comments
    - include: block-comments

  line-comments:
    - include: line-comment-double-slash

  line-comment-double-slash:
    - match: //
      push: line-comment-double-slash-content

  line-comment-double-slash-content:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.comment.json

    - include: eol-pop

  block-comments:
    - include: block-comment-basic

  block-comment-basic:
    - match: /\*
      push: block-comment-basic-content

  block-comment-basic-content:
    - meta_include_prototype: false
    - meta_scope: invalid.illegal.comment.json

    - match: \*/
      pop: 1

##[ VALUES / CONSTANTS ]########################################################

  constants:
    - include: valid-constants
    - include: invalid-constants

  valid-constants:
    - match: \b(?:false)\b
      scope: constant.language.boolean.false.json
      pop: 1

    - match: \b(?:true)\b
      scope: constant.language.boolean.true.json
      pop: 1

    - match: \b(?:null)\b
      scope: constant.language.null.json
      pop: 1

  invalid-constants:
    # when erroneously containing upper case letters
    - match: \b(?i:false|true|null)\b
      scope: invalid.illegal.expected-language-constant.json
      pop: 1

##[ VALUES / NUMBERS ]##########################################################

  numbers:
    - include: floats
    - include: integers

  floats:
    - include: decimal-float

  decimal-float:
    - include: decimal-float-basic

  decimal-float-basic:
    - match: |-
        (?x:
          (?:
            (?:
              (-)
            | (\+)
            )
            (\s+)??
          )?
          (
            (?:
              (0+)?? [1-9] \d*                                                  # non-zero with (invalid) leading zeros
            | 0                                                                 # zero
            )
            (?:
              (\.) \d+ ({{numeric_exponent}})?                                  # 1.1 1.1e1 1.1e-1 1.1e+1
            | (\.) ({{numeric_exponent}})?                                      # 1. 1.e1 1.e-1 1.e+1
            | ({{numeric_exponent}})                                            # 1e1 1e-1 1e+1
            )
          | (\.) \d+ ({{numeric_exponent}})?                                    # .1 .1e1 .1e-1 .1e+1
          )
        )
      scope: meta.number.float.decimal.json
      captures:
        1: constant.numeric.sign.json
        2: invalid.illegal.numeric-sign.json
        3: invalid.illegal.whitespace.json
        4: constant.numeric.value.json
        5: invalid.illegal.leading-zero.json
        6: punctuation.separator.decimal.json
        7: constant.numeric.value.exponent.json
        8: invalid.illegal.decimal-separator.json
        9: constant.numeric.value.exponent.json
        10: constant.numeric.value.exponent.json
        11: invalid.illegal.decimal-separator.json
        12: constant.numeric.value.exponent.json
      pop: 1

  integers:
    - include: decimal-integer

  decimal-integer:
    - include: decimal-integer-basic

  decimal-integer-basic:
    - match: |-
        (?x:
          (?:
            (?:
              (-)
            | (\+)
            )
            (\s+)??
          )?
          (
            (0+)?? [1-9] \d*                                                    # non-zero with (invalid) leading zeros
          | 0                                                                   # zero
          )
        )
      scope: meta.number.integer.decimal.json
      captures:
        1: constant.numeric.sign.json
        2: invalid.illegal.numeric-sign.json
        3: invalid.illegal.whitespace.json
        4: constant.numeric.value.json
        5: invalid.illegal.leading-zero.json
      pop: 1

##[ VALUES / STRINGS ]##########################################################

  strings:
    - include: double-quoted-string

  double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.json
      set: double-quoted-string-content

  double-quoted-string-content:
    - meta_include_prototype: false
    - meta_scope: >-
        meta.string.json
        string.quoted.double.json

    - match: \"
      scope: punctuation.definition.string.end.json
      pop: 1

    - include: double-quoted-string-escape-characters

    - match: '\n'
      scope: invalid.illegal.unclosed-string.json
      pop: 1

  double-quoted-string-escape-characters:
    - match: \\\"
      scope: constant.character.escape.double-quote.json                        # quotation mark

    - include: string-escape-characters

  string-escape-characters:
    - include: valid-string-escape-characters
    - include: invalid-string-escape-characters

  valid-string-escape-characters:
    - match: \\\\
      scope: constant.character.escape.back-slash.json                          # reverse solidus

    - match: \\\/
      scope: constant.character.escape.forward-slash.json                       # solidus

    - match: \\b
      scope: constant.character.escape.backspace.json

    - match: \\f
      scope: constant.character.escape.form-feed.json

    - match: \\n
      scope: constant.character.escape.newline.json                             # linefeed

    - match: \\r
      scope: constant.character.escape.carriage-return.json

    - match: \\t
      scope: constant.character.escape.horizontal-tab.json

    - match: \\u[0-9a-fA-F]{4}
      scope: >-
        constant.character.escape.unicode-symbol.basic-multilingual-plane.json

  invalid-string-escape-characters:
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.json

##[ STRUCTURES / ARRAYS ]#######################################################

  arrays:
    - match: \[
      scope: punctuation.definition.sequence.begin.json
      set:
        - array-body
        - array-item

  array-body:
    - meta_scope: meta.sequence.list.json

    - match: \]
      scope: punctuation.definition.sequence.end.json
      pop: 1

    - include: array-separators

  array-separators:
    - match: (?=,)
      branch_point: array-separators
      branch:
        - valid-array-separators
        - invalid-array-separators

    - match: (?=\S)
      push: array-item

  valid-array-separators:
    - match: ','
      scope: punctuation.separator.sequence.json
      set: array-expect-value

  invalid-array-separators:
    - match: ','
      scope: invalid.illegal.unexpected-separator.json

    - include: else-pop

  array-expect-value:
    - match: (?=\])
      fail: array-separators

    - include: array-item

  array-item:
    - include: any
    - include: invalid-array-separators

##[ STRUCTURES / OBJECTS ]######################################################

  # FIXME: leading separators

  # FIXME: trailing commas

  objects:
    - include: object-literal

  object-literal:
    - match: \{
      scope: punctuation.definition.mapping.begin.json
      set: object-literal-body

  object-literal-body:
    - meta_scope: meta.mapping.json

    - match: \}
      scope: punctuation.definition.mapping.end.json
      pop: 1

    - include: mapping-keys
    - include: mapping-separators

    - match: '[^\s\}]'
      scope: invalid.illegal.expected-mapping-key.json

  mapping-keys:
    - include: valid-mapping-keys
    - include: invalid-mapping-keys

  valid-mapping-keys:
    - match: \"
      scope: punctuation.definition.string.begin.json
      push: mapping-key-double-quoted

  invalid-mapping-keys: []

  mapping-key-double-quoted:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: >-
        meta.mapping.key.json
        meta.string.json
        string.quoted.double.json

    - include: double-quoted-string-content

  mapping-separators:
    - include: valid-mapping-separators
    - include: invalid-mapping-separators

  valid-mapping-separators:
    - match: ':'
      scope: punctuation.separator.key-value.json
      push: mapping-expect-value

  invalid-mapping-separators: []

  mapping-expect-value:
    - match: |-
        (?x:
          (?:
            ,
          | \s? (?=\})
          )
        )
      scope: invalid.illegal.expected-mapping-value.json
      pop: 1

    - match: (?=\S)
      set:
        - mapping-value
        - any-else-pop

  mapping-value:
    - clear_scopes: 1
    - meta_scope: meta.mapping.value.json

    - match: ','
      scope: punctuation.separator.sequence.json
      pop: 1

    - match: \s*(?=\})
      pop: 1

    - match: \s(?!/[/*])(?=[^\s,])|[^\s,]
      scope: invalid.illegal.expected-mapping-separator.json
      pop: 1

##[ HELPERS ]###################################################################

  any:
    - include: structures
    - include: values

  any-else-pop:
    - include: any
    - include: else-pop

  structures:
    - include: objects
    - include: arrays

  values:
    - include: constants
    - include: numbers
    - include: strings

  invalid-remainder:
    - match: '[^\s]+'
      scope: invalid.illegal.expected-end-of-file.json

##[ PROTOTYPES ]################################################################

  else-pop:
    - match: (?=\S)
      pop: 1

  eol-pop:
    - match: '$\n?'
      pop: 1
