[JSON] Rewrite syntax

Split up JSON syntax using inheritance into:

```text
.
└─ JSON.sublime-syntax                  # source.json
   ├─ GeoJSON.sublime-syntax            # source.json.geojson
   ├─ JSONdotNET.sublime-syntax         # source.json.jsondotnet
   └─ JSONC.sublime-syntax              # source.json.jsonc
      ├─ HJSON.sublime-syntax           # source.json.hjson
      └─ JSON5.sublime-syntax           # source.json.json5
```


Python source changes:

- use `py3.8`
- add ability to prettify & minify both JSON & JSONC
- add ability to auto-prettify (plain) JSON
- add typing info


Syntax changes:

- Add many more file extensions:
    - add doc links to extensions where applicable as a reference to be
      able to more quickly verify that they (still) use said syntax
      flavor
- (micro) Speed improvements:
    - use lazy double question mark quantifier where applicable
- Sublime Syntax Sections:
    - added sections for maintainers
- Numbers:
    - Correctly scope number signs with `constant.numeric.sign` instead
      of `keyword.operator.arithmetic`
    - Significantly improve number highlighting (thanks to deathaxe)
      to catch more typos while typing and mark illegal formatting as
      such
    - highlight the following as invalid:
        - numeric sign of explicitly positive numbers (for `JSON`,
          `JSON.NET` & `JSONC`)
        - whitespace between numeric sign and numeric value in numbers
        - leading decimal separators in numbers (for `JSON`, `JSON.NET`
          & `JSONC`)
        - trailing decimal separators in numbers (for `JSON`,
          `JSON.NET` & `JSONC`)
        - leading zeros in numbers
- Strings:
    - correctly highlight unclosed strings on the last line of the file
    - fix autocomplete selectors
- Objects:
    - Highlighting speed improvements for empty objects (thanks to
      FichteFoll)
    - Make `mapping.*` contexts more modular
- Arrays:
    - Highlighting speed improvements for empty arrays (thanks to
      FichteFoll)


Metadata changes:

- Commants:
    - add missing `TM_COMMENT_MODE` metadata
- Completions:
    - add completions for language constants, including kind info and details
      (with links to docs)
        - `null`, `false`, `true` for `JSON`
        - `Infinity` and `NaN` for `JSON5`
- Settings:
    - set a `default_extension`
- Symbol index:
    - with an object structure at the top-level, only top-level keys
      within now show up in the index (including tests for symbols and
      syntax)
- Indentation rules:
    - fix `decreaseIndentPattern`s and `increaseIndentPattern`s
- Folding rules:
    - fix folding rules
    - support indentation-based & syntax-based folding
- Tests:
    - test base scope in test files
    - significantly extend tests to cover more parts of the syntaxes
    - split original test file into logical parts
    - add indentation tests for:
        - `json`, `json5` & `jsonc`
        - `mapping` (objects), `sequence` (arrays)
    - add symbols tests for:
        - top-level keys of object structures (thanks to deathaxe)
        - languages: `json`, `jsonc` & `json5`
    - fix tests for `meta.mapping meta.mapping.*`


Language specific changes:

- `JSON`:
    - make use of newer syntax features including those only available
      in `version: 2` syntaxes
    - nake use of `variables` (with optimizations provided by deathaxe
      and regex patterns provided by Thomas Smith)
    - context names now more closely match the naming scheme of other
      (recently re-written) default syntaxes
    - (correctly formatted) JSON code can now be prettified or minified
      via the context menu or the command palette. JSON code can
      optionally be auto-prettified on pre save events.
    - highlight the following as invalid:
        - leading commas
        - trailing commas
        - multiple commas
    - only allow exactly one structure (object, array) or value
      (constant, number, string) at top level (thanks to Keith Hall)
    - highlight single quoted strings as illegal
- `JSON.NET`:
    - support requested by Keith Hall,
      built with feedback from Michael B. Lyons
- `JSONC`:
    - highlight some files by default as `JSONC` (as decided by
      Jon Skinner in sublimehq/Packages#285)
    - highlight leading & multiple commas as invalid, trailing as valid
    - scope empty block comments as such
    - support syntax based folding of ST4131+,
      compare sublimehq/Packages#3291
- `HJSON`:
    - single quoted strings
    - thrice single quoted multiline strings
    - line comments with hashes
- `JSON5`:
    - explicitly pos numbers, hexadecimal ints, Infinity and NaN
    - single quoted strings
    - more escape chars for strings
    - ECMA identifierName as object keys (regexes thanks to Thomas
      Smith)
        - scoped as plain unquoted strings (thanks to Thomas Smith)
        - support string interpolation (thanks to deathaxe)
    - line continuation in strings (with tests thanks to Keith Hall)
    - highlight the following as invalid:
        - multiple commas


Changes to other languages:

- Leave `JSON` headers in `Markdown` as `json` only, but split up fenced
  code blocks into `json`, `json5` & `jsonc` to behave similarly to
  `GitHub Flavored Markdown`


Thanks to these people who provided valuable feedback:

- Ashwin Shenoy
- Jack F. Cherng
- Janos Wortmann
- Jon Skinner
- FichteFoll
- Keith Hall
- Michael B. Lyons
- Rafał Chłodnicki
- Thomas Smith
- Will Bond
- deathaxe


BREAKING CHANGES:

- JSON does not have values that can be set via an inline calculation
  with the help of operators, but only simple number values. Scopes for
  number signs have changed from being `keyword.operator.arithmetic` to
  `constant.numeric.sign`.
  > Note
  > Color scheme authors should add this, should it be missing.
- The `JSON.sublime-syntax` now marks comments as `invalid`.
  > Note
  > Third party plugin authors should instead target
  > `JSONC.sublime-syntax` to keep the user experience as-is.
- Only top-level keys in JSON files containing a single object structure
  are indexed symbols.
  > Note
  > Color scheme authors should add special highlighting to
  > differentiate them from other keys. Compare the `Symbol List`
  > metadata file.

References:

- fix sublimehq/Packages#285
- address sublimehq/Packages#421 (thanks to FichteFoll)
- address sublimehq/Packages#481 to remove incompatible regex patterns
  (according to Will Bond)
- address sublimehq/Packages#757 to fix line comments for `JSONC`
  (thanks to Keith Hall)
- address sublimehq/Packages#2430 using sort-order (as requested by
  deathaxe)
- address sublimehq/Packages#2711 with regards to
  `constant.language.null` vs. `constant.language.empty` (thanks to
  FichteFoll)
- address sublimehq/Packages#2852 to fix scopes of curly braces & square
  brackets in `JSON` (thanks to Thomas Smith)
- address sublimehq/Packages#3228 to fix `punctuation.separator` scopes,
  compare sublimehq/Packages#3270
- address sublimehq/sublime_text#3154 and add symbol tests
